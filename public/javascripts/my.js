// Generated by CoffeeScript 1.3.3
(function() {

  $(function() {
    var App, AppView, Expense, ExpenseList, ExpenseView, Expenses, Todo;
    Todo = Backbone.Model.extend({
      idAttribute: "_id",
      defaults: function() {
        return {
          title: "empty todo...",
          done: false
        };
      },
      initialize: function() {
        if (!this.get("title")) {
          return this.set({
            "title": this.defaults().title
          });
        }
      },
      clear: function() {
        return this.destroy();
      }
    });
    Expense = Backbone.Model.extend({
      idAttribute: "_id",
      defaults: function() {
        return {
          date: new Date(),
          remark: "",
          price: 0
        };
      },
      initialize: function() {
        if (!this.get("date")) {
          return this.set({
            "date": this.defaults().date
          });
        }
      },
      display_date: function() {
        return this.getDateToString(this.get("date"));
      },
      getDateToString: function(target) {
        if ((typeof target) === "string") {
          target = new Date(target);
        }
        return "" + (target.getMonth() + 1) + "/" + target.getDate();
      }
    });
    ExpenseList = Backbone.Collection.extend({
      model: Expense,
      url: "/expenses"
    });
    Expenses = new ExpenseList;
    ExpenseView = Backbone.View.extend({
      tagName: "li",
      template: _.template($('#item-template').html()),
      events: {
        "click a.destroy": "clear",
        "dblclick .view": "edit",
        "keypress .edit": "updateOnEnter",
        "blur .edit": "close"
      },
      initialize: function() {
        this.model.bind('change', this.render, this);
        return this.model.bind('destroy', this.remove, this);
      },
      render: function() {
        this.$el.html(this.template(_.extend(this.model.toJSON(), {
          "display_date": this.model.display_date()
        })));
        this.input = this.$('.edit');
        return this;
      },
      edit: function() {
        this.$el.addClass("editing");
        return this.input.focus();
      },
      updateOnEnter: function(e) {
        if (e.keyCode === 13) {
          return this.close();
        }
      },
      close: function() {
        var value;
        value = this.input.val();
        if (!value) {
          this.clear();
        }
        this.model.save({
          title: value
        });
        return this.$el.removeClass("editing");
      },
      clear: function() {
        return this.model.clear();
      }
    });
    AppView = Backbone.View.extend({
      el: $("#expenseapp"),
      events: {
        "keypress #remark": "addExpense",
        "keypress #price": "addExpense"
      },
      initialize: function() {
        var before_yesterday, today, yesterday;
        this.input = this.$("#new-todo");
        this.display_date = this.$("#selectdate");
        this.remark = this.$("#remark");
        this.price = this.$("#price");
        Expenses.bind("add", this.addOne, this);
        Expenses.bind('reset', this.addAll, this);
        Expenses.bind("all", this.render, this);
        this.footer = $('footer');
        this.main = $('#main');
        today = new Date();
        yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);
        before_yesterday = new Date(today.getTime() - 2 * 24 * 60 * 60 * 1000);
        $("#selectdate").append($('<option>').text(this.getDateToString(today)), $('<option>').text(this.getDateToString(yesterday)), $('<option>').text(this.getDateToString(before_yesterday)));
        return Expenses.fetch();
      },
      render: function() {
        this.main.show();
        this.footer.show();
        return $("#yama").html(Expenses.length);
      },
      addOne: function(expense) {
        var view;
        view = new ExpenseView({
          model: expense
        });
        return this.$("#expense-list").append(view.render().el);
      },
      addTodo: function(e) {
        if (e.keyCode !== 13) {
          return;
        }
        Todos.create({
          title: this.input.val()
        });
        return this.input.val("");
      },
      addExpense: function(e) {
        if (e.keyCode !== 13) {
          return;
        }
        Expenses.create({
          date: this.getStringToDate(this.display_date.val()),
          remark: this.remark.val(),
          price: this.price.val()
        });
        this.remark.val("");
        return this.price.val("");
      },
      addAll: function() {
        return Expenses.each(this.addOne);
      },
      getDateToString: function(date) {
        return "" + (date.getMonth() + 1) + "/" + date.getDate();
      },
      getStringToDate: function(str) {
        var ary, date, month_date, _i, _len;
        ary = str.split("/");
        month_date = new Array();
        for (_i = 0, _len = ary.length; _i < _len; _i++) {
          date = ary[_i];
          month_date.push(parseInt(date));
        }
        date = new Date();
        date.setMonth(month_date[0] - 1);
        date.setDate(month_date[1]);
        return date;
      }
    });
    return App = new AppView();
  });

}).call(this);
