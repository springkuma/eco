// Generated by CoffeeScript 1.3.3
(function() {

  $(function() {
    var App, AppView, DateListView, DateView, Expense, ExpenseList, ExpenseView, Expenses;
    Expense = Backbone.Model.extend({
      idAttribute: "_id",
      defaults: function() {
        return {
          year: 0,
          month: 0,
          date: 0,
          remark: "",
          price: 0
        };
      },
      initialize: function() {},
      display_date: function() {
        return this.get("month") + "/" + this.get("date");
      }
    });
    ExpenseList = Backbone.Collection.extend({
      model: Expense,
      url: "/expenses",
      initialize: function() {
        this.modelsForDate = {};
        this.on("add", function(expense) {
          var key;
          key = this.generate(expense);
          this.modelsForDate[key] = expense;
          return trigger("add-" + key, expense);
        });
        return this.on("reset", function(expenses) {
          var key, models, _ref, _results;
          expenses.each(function(expense) {
            var key;
            key = this.generate(expense);
            return this.modelsForDate[key] = expense;
          }, this);
          console.log(typeof this.modelsForDate);
          _ref = this.modelsForDate;
          _results = [];
          for (key in _ref) {
            models = _ref[key];
            _results.push(console.log(key, models));
          }
          return _results;
        });
      },
      generate: function(expense) {
        return expense.get("year") + "/" + expense.get("month") + "/" + expense.get("date");
      },
      parse: function(res) {
        this.parseDate(res);
        return res;
      },
      parseDate: function(res) {
        var expense, key, obj, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = res.length; _i < _len; _i++) {
          obj = res[_i];
          expense = new Expense(obj);
          key = expense.get("year") + "/" + expense.get("month") + "/" + expense.get("date");
          _results.push(this.modelsForDate[key] = expense);
        }
        return _results;
      }
    });
    Expenses = new ExpenseList();
    ExpenseView = Backbone.View.extend({
      tagName: "li",
      className: "expense-item",
      template: _.template($('#item-template').html()),
      events: {
        "click a.destroy": "clear",
        "dblclick .view": "edit",
        "keypress .edit": "updateOnEnter",
        "blur .edit": "close"
      },
      initialize: function() {
        this.model.bind('change', this.render, this);
        return this.model.bind('destroy', this.remove, this);
      },
      render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        this.input = this.$('.edit');
        return this;
      },
      edit: function() {
        this.$el.addClass("editing");
        return this.input.focus();
      },
      updateOnEnter: function(e) {
        if (e.keyCode === 13) {
          return this.close();
        }
      },
      close: function() {
        var value;
        value = this.input.val();
        if (!value) {
          this.clear();
        }
        this.model.save({
          title: value
        });
        return this.$el.removeClass("editing");
      },
      clear: function() {
        return this.model.clear();
      }
    });
    DateListView = Backbone.View.extend({
      el: $('#date-list'),
      list: {},
      initialize: function() {
        var i, month, today, view, year, _results;
        today = new Date();
        year = today.getFullYear();
        month = today.getMonth() + 1;
        i = today.getDate();
        _results = [];
        while (i > 0) {
          view = new DateView(year, month, i);
          this.addList(view);
          this.$el.append(view.render().el);
          _results.push(i--);
        }
        return _results;
      },
      addList: function(view) {
        var key;
        key = view.month + "/" + view.date;
        return this.list[key] = view;
      }
    });
    DateView = Backbone.View.extend({
      tagName: 'li',
      template: _.template($('#date-template').html()),
      events: {
        "keypress .new-price": "addExpense"
      },
      initialize: function(year, month, date) {
        Expenses.bind('reset', this.addForDate, this);
        Expenses.bind("add", this.addOne, this);
        this.year = year;
        this.month = month;
        this.date = date;
        this.id = "new-" + this.month + "-" + this.date;
        return this.total = 0;
      },
      render: function() {
        this.$el.attr({
          id: this.id
        });
        this.$el.html(this.template(this.total));
        this.remark = this.$el.find(".new-remark-field");
        this.price = this.$el.find(".new-price-field");
        return this;
      },
      addOne: function(expense) {
        var view;
        if (!(expense.get("year") === this.year && expense.get("month") === this.month && expense.get("date") === this.date)) {
          return;
        }
        this.total += expense.get("price");
        view = new ExpenseView({
          model: expense
        });
        this.$("#expense-list").append(view.render().el);
        return this.$el.children(".total").html("日計: " + this.total + "円");
      },
      addForDate: function(expenses) {
        var ex, ret, _i, _len, _results;
        ret = expenses.filter(function(expense) {
          return this.month === expense.get("month") && this.date === expense.get("date");
        }, this);
        _results = [];
        for (_i = 0, _len = ret.length; _i < _len; _i++) {
          ex = ret[_i];
          _results.push(this.addOne(ex));
        }
        return _results;
      },
      addExpense: function(e) {
        if (e.keyCode !== 13) {
          return;
        }
        Expenses.create({
          year: this.year,
          month: this.month,
          date: this.date,
          remark: this.remark.val(),
          price: parseInt(this.price.val(), 10)
        });
        this.remark.val("");
        return this.price.val("");
      }
    });
    AppView = Backbone.View.extend({
      el: $("#expenseapp"),
      initialize: function() {
        var list;
        this.input = this.$("#new-todo");
        this.display_date = this.$("#selectdate");
        this.remark = this.$("#remark");
        this.price = this.$("#price");
        this.dates = new Array();
        Expenses.bind("all", this.render, this);
        this.footer = $('footer');
        this.main = $('#main');
        list = new DateListView();
        list.render();
        return Expenses.fetch();
      },
      render: function() {
        this.main.show();
        this.footer.show();
        $("#yama").html(Expenses.length);
        return this;
      },
      addOne: function(expense) {
        return this.dates[expense.get("date").getDate() - 1].addOne(expense);
      }
    });
    return App = new AppView();
  });

}).call(this);
