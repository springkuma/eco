// Generated by CoffeeScript 1.3.3
(function() {
  var Expense, ExpenseSchema, Schema, app, express, mongoose, port, routes, startDate;

  express = require("express");

  routes = require("./routes");

  mongoose = require("mongoose");

  mongoose.connect("mongodb://localhost/mongo_data");

  app = module.exports = express.createServer();

  app.configure(function() {
    app.set("views", __dirname + "/views");
    app.set("view engine", "jade");
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(app.router);
    return app.use(express["static"](__dirname + "/public"));
  });

  app.configure("development", function() {
    return app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
  });

  app.configure("production", function() {
    return app.use(express.errorHandler());
  });

  Schema = mongoose.Schema;

  ExpenseSchema = new Schema({
    year: Number,
    month: Number,
    date: Number,
    remark: String,
    price: Number
  });

  Expense = mongoose.model('Expense', ExpenseSchema);

  startDate = 25;

  app.get("/", routes.index);

  app.get("/expenses", function(req, res) {
    var q1, q2, query;
    q1 = Expense.find();
    q1.where('month').equals(8);
    q1.where('date').gte(25);
    q2 = Expense.find();
    q2.where('month').equals(9);
    q2.where('date').lt(25);
    query = q1.or(q2);
    return q1.exec(function(err1, ex1) {
      return q2.exec(function(err2, ex2) {
        if (!(err1 & err2)) {
          ex1.push.apply(ex1, ex2);
          console.log(ex1);
          return res.json(ex1);
        } else {
          return res.json({
            success: false
          });
        }
      });
    });
  });

  app.post("/expenses", function(req, res) {
    var expense;
    expense = new Expense(req.body);
    return expense.save(function(error) {
      if (!error) {
        return res.json(expense);
      } else {
        return res.json({
          success: false
        });
      }
    });
  });

  app.put("/expenses/:id", function(req, res) {
    var data;
    data = {
      year: req.body.year,
      month: req.body.month,
      date: req.body.date,
      remark: req.body.remark,
      price: req.body.price
    };
    return Expense.update({
      _id: req.params.id
    }, data, function(error, expense) {
      if (!error) {
        return res.json(expense);
      } else {
        return res.json({
          success: false
        });
      }
    });
  });

  app["delete"]("/expenses/:id", function(req, res) {
    return Expense.findById(req.params.id, function(error, expense) {
      if (!error) {
        return expense.remove(function(delete_error) {
          if (!delete_error) {
            return res.json({
              success: true
            });
          } else {
            return res.json({
              success: false
            });
          }
        });
      } else {
        return res.json({
          success: false
        });
      }
    });
  });

  port = process.env.PORT || 3000;

  app.listen(port, function() {
    return console.log("Express server listening on port %d in %s mode", app.address().port, app.settings.env);
  });

}).call(this);
